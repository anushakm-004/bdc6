package pack3;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import com.mongodb.MapReduceCommand.OutputType;

public class ReportClass {
	ExtentHtmlReporter reporter;
	ExtentReports extent;
	ExtentTest logger;
	WebDriver driver;
	
	@BeforeTest
	public void startReport() {
		//user.dir gets the location of current java/maven project
		String path= System.getProperty("user.dir")+"/extent-reports/report1.html";
		reporter= new ExtentHtmlReporter(path);
		//reporter class helps to set the path of the report
		//extent class helps to define tests and track the status of test(pass/fail)
		extent = new ExtentReports();
		extent.attachReporter(reporter);
		extent.setSystemInfo("HostName", "Next Gen Automated Testing");
		extent.setSystemInfo("Environment", "Selenium automated test");
		extent.setSystemInfo("User name", "Gayathri");
		reporter.config().setDocumentTitle("title appears here");
		reporter.config().setTheme(Theme.STANDARD);
		reporter.config().setReportName("TestMe End to End Automation report");
		
	}
	
@Test(priority=1)
  public void testRegistration() {
		logger=extent.createTest("testRegistration","Customer registers the details in TestMeApp");
		//test code
		Assert.assertTrue(true);
}
	
@Test(priority=2)
  public void testLogin() {
	logger=extent.createTest("testLogin","Customer logins to TestMeApp using credentials");
	//test code
	Assert.assertTrue(false);
  }

@Test(priority=3)
public void testCart() {
	logger=extent.createTest("testCart","User adds products to the cart for purchase");
	//test code
	
}

@Test(priority=4)
public void testPayment() {
	logger=extent.createTest("testPayment","Payment process is done for the product selected");
	//test code
	throw new SkipException("this functionality is yet to be coded;hence skipped");
	
}

@AfterMethod
public void getResult(ITestResult result) throws IOException {
	 if(result.getStatus() == ITestResult.SUCCESS) {
		 logger.log(Status.PASS,MarkupHelper.createLabel(result.getName()+"Test passed",  ExtentColor.GREEN));
	 }
	 else if(result.getStatus() == ITestResult.FAILURE) {
		 logger.log(Status.FAIL,MarkupHelper.createLabel(result.getName()+"Test failed",  ExtentColor.RED));
		 TakesScreenshot capture=(TakesScreenshot)driver;
		 File source = capture.getScreenshotAs(OutputType.FILE);
		 String imgPath = System.getProperty("user.dir"+"/extent-reports/snapshots/" +result.getName() +".png");
		 FileUtils.copyFile(source, new File(imgPath));
		 logger.addScreenCaptureFromPath(imgPath,result.getName());
		 
	 }
	 else if(result.getStatus() == ITestResult.SKIP) {
		 logger.log(Status.SKIP,MarkupHelper.createLabel(result.getName()+"Test skipped",  ExtentColor.ORANGE));
	 }
	
}

@AfterTest
public void endReport() {
	extent.flush(); //commits the generated reports
}
}
